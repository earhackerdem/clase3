---
alwaysApply: true
---

# Integraci√≥n con Jira (SI APLICA)

## OBTENER INFORMACI√ìN DE JIRA

### Al recibir una tarea de Jira:
- Usa el MCP de Atlassian para obtener toda la informaci√≥n
- Lee la descripci√≥n completa de la tarea
- Identifica y extrae:
  - **Historia de Usuario** (User Story)
  - **Objetivos** (Goals)
  - **Criterios de Aceptaci√≥n** (Acceptance Criteria)

### Ejemplo de obtenci√≥n:
```
1. Obtener informaci√≥n del usuario actual
2. Buscar tarea por issue key (ej: SCRUM-5)
3. Leer descripci√≥n completa
4. Extraer elementos clave
5. Mostrar resumen al usuario
```

## ACTUALIZAR ESTADO DE LA TAREA

### Al comenzar a trabajar:
- Cambia el estado de "Por hacer" a "En progreso"
- Agrega un comentario indicando que comenzaste a trabajar
- Si creaste una rama, menciona el nombre de la rama

### Ejemplo de comentario al iniciar:
```markdown
üöÄ Comenzando a trabajar en esta tarea

He analizado los requisitos y voy a proceder con la implementaci√≥n.

üåø Rama creada: `feature/SCRUM-5-actualizar-tareas`
```

## ASOCIAR COMMITS CON JIRA

### Formato de commits con issue key:
```bash
git commit -m "[SCRUM-5] Crear modelo Task y migraci√≥n"
git commit -m "[SCRUM-5] Implementar TaskController"
git commit -m "[SCRUM-5] Agregar tests con 87% coverage"
```

### Esto permite:
- Trackear cambios desde Jira
- Ver commits asociados a la tarea
- Generar release notes autom√°ticas

## DESPU√âS DE HACER EL PR

### Actualizar estado en Jira:
1. Mover tarea a "En revisi√≥n" o estado similar
2. Agregar comentario con:
   - Enlace al Pull Request
   - Resumen de cambios
   - Tests agregados
   - Cobertura alcanzada

### Ejemplo de comentario con PR:
```markdown
‚úÖ Pull Request creado

### Cambios implementados
- ‚úÖ Endpoint PUT /api/tasks/{id} para actualizar tareas
- ‚úÖ Validaciones con UpdateTaskRequest
- ‚úÖ API Resource para respuestas
- ‚úÖ Tests completos para todos los verbos HTTP

### Testing
- ‚úÖ 25 tests ejecutados, todos pasaron
- ‚úÖ Cobertura alcanzada: 87%

### Pull Request
https://github.com/usuario/proyecto/pull/123

La tarea est√° lista para revisi√≥n de c√≥digo.
```

## TRANSICIONES DE ESTADO

### Flujo t√≠pico:
1. **Por hacer** ‚Üí Al recibir la tarea
2. **En progreso** ‚Üí Al crear rama y comenzar trabajo
3. **En revisi√≥n** ‚Üí Al crear Pull Request
4. **Done/Completada** ‚Üí Cuando el PR sea merged

### Obtener transiciones disponibles:
Usa el MCP de Atlassian para obtener las transiciones disponibles para la tarea espec√≠fica.

## COMENTARIOS EN JIRA

### Agrega comentarios en momentos clave:
- ‚úÖ Al comenzar a trabajar (con nombre de rama)
- ‚úÖ Si encuentras bloqueadores o problemas
- ‚úÖ Al crear el Pull Request (con enlace y resumen)
- ‚úÖ Si necesitas clarificaci√≥n de requisitos

### Formato de comentarios:
- Usa emojis para mejorar legibilidad (üöÄ, ‚úÖ, ‚ö†Ô∏è, üåø)
- S√© claro y conciso
- Incluye enlaces relevantes (PR, commits, documentaci√≥n)
- Menciona m√©tricas importantes (cobertura, tests)

## VALIDACI√ìN DE CRITERIOS DE ACEPTACI√ìN

### Antes de mover a "En revisi√≥n":
- Verifica que se cumplan TODOS los criterios de aceptaci√≥n
- Si alguno no se cumple, agrega comentario explicando por qu√©
- Prop√≥n alternativas si es necesario

### Ejemplo de validaci√≥n:
```markdown
‚úÖ Validaci√≥n de Criterios de Aceptaci√≥n

- [x] Endpoint PUT /api/tasks/{id} creado
- [x] Validaciones implementadas
- [x] Tests con cobertura > 80%
- [x] API Resource para respuestas
- [x] Documentaci√≥n actualizada

Todos los criterios de aceptaci√≥n han sido cumplidos.
```
