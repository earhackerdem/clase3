---
alwaysApply: true
---

# Buenas Pr√°cticas de Laravel 12

## SCAFFOLDING DE LARAVEL (OBLIGATORIO)

### USA comandos de `php artisan make:...` para generar archivos
Nunca crees archivos manualmente si existe un comando artisan

### Comandos disponibles:
```bash
php artisan make:model NombreModelo -m          # Con migraci√≥n
php artisan make:controller NombreController --api  # Controlador API
php artisan make:request StoreNombreRequest     # Form Request
php artisan make:factory NombreFactory          # Factory
php artisan make:seeder NombreSeeder            # Seeder
php artisan make:test NombreTest                # Test
php artisan make:resource NombreResource        # API Resource
```

## SEPARACI√ìN DE CAPAS

### Organiza la l√≥gica correctamente:

- **Rutas:** Solo definiciones, NO l√≥gica de negocio
- **Controladores:** Coordinaci√≥n, NO validaci√≥n ni queries complejas
- **Form Requests:** Toda la validaci√≥n
- **Modelos:** Relaciones y l√≥gica de dominio
- **Servicios:** L√≥gica de negocio compleja (cuando sea necesario)
- **Resources:** Transformaci√≥n de datos para respuestas API

## RUTAS DE API

### Usa `Route::apiResource()` para CRUD completos:

```php
// ‚úÖ CORRECTO - Una l√≠nea genera 5 endpoints
Route::apiResource('tasks', TaskController::class);

// Esto genera autom√°ticamente:
// GET    /tasks           -> index()
// POST   /tasks           -> store()
// GET    /tasks/{id}      -> show()
// PUT    /tasks/{id}      -> update()
// DELETE /tasks/{id}      -> destroy()
```

### Opciones de apiResource:

```php
// Solo algunos m√©todos
Route::apiResource('tasks', TaskController::class)
    ->only(['index', 'show']);

// Excluir algunos m√©todos
Route::apiResource('tasks', TaskController::class)
    ->except(['destroy']);
```

### ‚ùå EVITAR rutas individuales si puedes usar apiResource:
```php
// ‚ùå MAL - C√≥digo repetitivo
Route::get('/tasks', [TaskController::class, 'index']);
Route::post('/tasks', [TaskController::class, 'store']);
Route::get('/tasks/{id}', [TaskController::class, 'show']);
Route::put('/tasks/{id}', [TaskController::class, 'update']);
Route::delete('/tasks/{id}', [TaskController::class, 'destroy']);

// ‚úÖ BIEN - Una l√≠nea
Route::apiResource('tasks', TaskController::class);
```

### üìä EJEMPLO REAL: Refactor de Tasks API

**Antes (230 l√≠neas en routes/api.php):**
- Validaciones manuales mezcladas con l√≥gica
- Formateo de respuestas inconsistente
- Dif√≠cil de mantener y testear

**Despu√©s (13 l√≠neas):**
```php
use App\Http\Controllers\TaskController;

Route::apiResource('tasks', TaskController::class);
```

**Resultados:**
- ‚úÖ Reducci√≥n del 94.3% en l√≠neas de c√≥digo
- ‚úÖ Cobertura de tests: 90.7%
- ‚úÖ 19 tests pasando
- ‚úÖ Arquitectura en capas clara

**Archivos generados:**
- `TaskController.php` - 64 l√≠neas de c√≥digo limpio
- `StoreTaskRequest.php` - Validaciones centralizadas
- `UpdateTaskRequest.php` - Validaciones de actualizaci√≥n
- `TaskResource.php` - Transformaci√≥n estandarizada

## API RESOURCES

### Crea API Resources para transformar datos:

```bash
php artisan make:resource TaskResource
```

### Uso correcto:

```php
// Para LISTAS (index)
public function index()
{
    $tasks = Task::all();
    return TaskResource::collection($tasks);
}

// Para UN SOLO elemento (show, store, update)
public function show($id)
{
    $task = Task::findOrFail($id);
    return new TaskResource($task);
}

public function store(StoreTaskRequest $request)
{
    $task = Task::create($request->validated());
    return new TaskResource($task);
}
```

### ‚ùå NUNCA devuelvas modelos directamente:
```php
// ‚ùå MAL
return Task::all();
return Task::find($id);

// ‚úÖ BIEN
return TaskResource::collection(Task::all());
return new TaskResource(Task::find($id));
```

## ELOQUENT Y MODELOS

### Define fillable o guarded:
```php
class Task extends Model
{
    protected $fillable = ['title', 'description', 'status'];
    
    // O usa guarded
    protected $guarded = ['id'];
}
```

### Define relaciones correctamente:
```php
public function user()
{
    return $this->belongsTo(User::class);
}

public function comments()
{
    return $this->hasMany(Comment::class);
}
```

## VALIDACI√ìN

### Usa Form Requests para validaci√≥n:
```php
class StoreTaskRequest extends FormRequest
{
    public function rules()
    {
        return [
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'status' => 'sometimes|in:pendiente,en progreso,completada',
        ];
    }
}
```

### En el controlador:
```php
public function store(StoreTaskRequest $request)
{
    // La validaci√≥n ya pas√≥ autom√°ticamente
    $task = Task::create($request->validated());
    return new TaskResource($task);
}
```

## PRINCIPIOS SOLID

- **S**ingle Responsibility: Cada clase tiene una sola responsabilidad
- **O**pen/Closed: Abierto a extensi√≥n, cerrado a modificaci√≥n
- **L**iskov Substitution: Las subclases deben ser sustituibles por sus clases base
- **I**nterface Segregation: Interfaces espec√≠ficas mejor que una general
- **D**ependency Inversion: Depende de abstracciones, no de implementaciones

## FACTORIES Y SEEDERS

### Usa factories para datos de prueba:
```php
Task::factory()->count(10)->create();
```

### Define factories realistas:
```php
public function definition()
{
    return [
        'title' => fake()->sentence(),
        'description' => fake()->paragraph(),
        'status' => fake()->randomElement(['pendiente', 'en progreso', 'completada']),
    ];
}
```

## ESTRUCTURA DE COMMITS EXITOSOS

### Commits L√≥gicos por Capa

**Orden recomendado basado en refactor exitoso de Tasks:**

1. **Tests primero (TDD)**
```bash
git add tests/Feature/TaskApiTest.php
git commit -m "[TESTS] Agregar tests para GET, PUT, DELETE de Tasks API

- 10 tests nuevos usando patr√≥n AAA
- Tests para index, show, update, destroy
- Todos usan Task::factory()
- Cobertura objetivo: >80%"
```

2. **Form Requests (Validaciones)**
```bash
git add app/Http/Requests/
git commit -m "[REFACTOR] Mover validaciones a Form Requests

- StoreTaskRequest con validaciones para crear
- UpdateTaskRequest con validaciones para actualizar
- Migrada l√≥gica desde routes/api.php
- Separaci√≥n correcta de responsabilidades"
```

3. **API Resources (Transformaci√≥n)**
```bash
git add app/Http/Resources/
git commit -m "[REFACTOR] Agregar TaskResource para respuestas API

- TaskResource para transformaci√≥n estandarizada
- Reemplaza formateo manual de arrays
- Permite uso de collection() para listas
- Formato consistente en todas las respuestas"
```

4. **Controller (Coordinaci√≥n)**
```bash
git add app/Http/Controllers/TaskController.php
git commit -m "[REFACTOR] Crear TaskController con m√©todos API

- 5 m√©todos RESTful implementados
- index(), store(), show(), update(), destroy()
- Usa Form Requests para validaci√≥n
- Usa Resources para respuestas
- C√≥digo limpio y mantenible"
```

5. **Rutas (Simplificaci√≥n)**
```bash
git add routes/api.php
git commit -m "[REFACTOR] Simplificar rutas usando Route::apiResource

- 230 l√≠neas reducidas a 13 l√≠neas (94.3%)
- Route::apiResource() genera 5 rutas autom√°ticamente
- Toda l√≥gica movida a capas correctas
- Tests pasan, cobertura 90.7%"
```

## ANATOM√çA DE UN PULL REQUEST EXITOSO

### T√≠tulo Descriptivo
```
[REFACTOR] Migrar Tasks API a arquitectura en capas
[FEATURE] Implementar CRUD completo de Tasks
[FIX] Corregir validaci√≥n en TaskController
```

### Descripci√≥n Completa

**Incluir siempre:**

1. **Contexto** - ¬øPor qu√© este cambio?
2. **Problema** - ¬øQu√© estaba mal?
3. **Soluci√≥n** - ¬øC√≥mo se resolvi√≥?
4. **Testing** - Resultados de tests y cobertura
5. **Archivos** - Lista de archivos nuevos/modificados
6. **Checklist** - Validaci√≥n de completitud

**Ejemplo de PR exitoso:**
```markdown
## Contexto
Refactorizar CRUD de Tasks desde closures a arquitectura en capas.

## Problema
- ‚ùå 230 l√≠neas mezcladas en routes/api.php
- ‚ùå Validaciones manuales repetitivas
- ‚ùå Dif√≠cil de testear y mantener

## Soluci√≥n
- ‚úÖ TaskController con 5 m√©todos RESTful
- ‚úÖ Form Requests para validaciones
- ‚úÖ TaskResource para respuestas
- ‚úÖ Route::apiResource() en una l√≠nea

## Testing
- ‚úÖ 19 tests pasando (50 assertions)
- ‚úÖ Cobertura: 90.7%
- ‚úÖ Todos los verbos HTTP cubiertos

## Archivos Creados (4)
- TaskController.php
- StoreTaskRequest.php
- UpdateTaskRequest.php
- TaskResource.php

## Archivos Modificados (2)
- routes/api.php (230 ‚Üí 13 l√≠neas)
- TaskApiTest.php (+212 l√≠neas de tests)

## Checklist
- [x] Tests pasan
- [x] Cobertura >80%
- [x] PSR-12 aplicado
- [x] Commits l√≥gicos
```

## M√âTRICAS DE CALIDAD

### Indicadores de C√≥digo Limpio

**‚úÖ Excelente:**
- Cobertura >85%
- L√≠neas por m√©todo <20
- Complejidad ciclom√°tica <10
- Tests descriptivos con patr√≥n AAA
- Commits l√≥gicos y at√≥micos

**‚ö†Ô∏è Revisar:**
- Cobertura 70-80%
- L√≠neas por m√©todo 20-50
- M√©todos con m√∫ltiples responsabilidades
- Tests sin Factory
- Commits gigantes

**‚ùå Refactorizar:**
- Cobertura <70%
- L√≠neas por m√©todo >50
- L√≥gica en rutas o closures
- Sin tests
- Commits "fix", "wip", "changes"

## CHECKLIST ANTES DE MERGE

- [ ] Todos los tests pasan
- [ ] Cobertura >80%
- [ ] Sin errores de linter
- [ ] PSR-12 aplicado
- [ ] Documentaci√≥n actualizada (si aplica)
- [ ] Commits descriptivos y l√≥gicos
- [ ] PR con descripci√≥n completa
- [ ] Sin console.log, dd(), dump() en c√≥digo
- [ ] Variables y m√©todos con nombres claros
- [ ] Sin c√≥digo comentado innecesario
