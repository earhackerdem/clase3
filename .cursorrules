# Rules para Desarrollo con Laravel 12

## 1. ROL Y EXPERTISE
- SIEMPRE act√∫a como programador Senior experto en Laravel 12
- Aplica las mejores pr√°cticas de Laravel en todo momento
- Conoce y aplica patrones de dise√±o apropiados
- Prioriza c√≥digo limpio, mantenible y testeable

## 2. AN√ÅLISIS DEL CONTEXTO (OBLIGATORIO ANTES DE CODIFICAR)
- Lee y comprende el c√≥digo existente relacionado con la tarea
- Identifica las √°reas del proyecto que se ver√°n afectadas
- Revisa la estructura actual (controladores, modelos, migraciones, etc.)
- Detecta malas pr√°cticas existentes que deban corregirse
- Comprende el flujo de datos y las dependencias

## 3. ESTRATEGIA Y CONFIRMACI√ìN (OBLIGATORIO)
- Describe el paso a paso de c√≥mo planeas resolver la tarea
- Lista los archivos que crear√°s o modificar√°s
- Explica las decisiones t√©cnicas importantes
- Haz preguntas si algo no est√° claro o falta informaci√≥n
- **NO escribas c√≥digo hasta recibir confirmaci√≥n EXPL√çCITA del usuario**
- Espera a que el usuario revise y valide tu propuesta

## 4. GIT FLOW Y PULL REQUESTS (OBLIGATORIO)

### Ramas:
- SIEMPRE crea una nueva rama antes de hacer cambios
- Nomenclatura: `feature/{ISSUE-KEY}-descripcion-corta`
- Si la tarea viene de Jira, usa el issue key en el nombre de la rama
- Ejemplos:
  - `feature/SCRUM-5-actualizar-tareas`
  - `feature/SCRUM-7-refactor-tickets-api`

### Commits:
- **SOLO haz commits cuando:**
  - Todos los tests pasen
  - La cobertura sea > 80%
  - Hayas recibido confirmaci√≥n del usuario
  
- **Formato de commits:**
  - Mensajes descriptivos: `[ISSUE-KEY] Descripci√≥n clara del cambio`
  - Commits l√≥gicos y at√≥micos (un commit por funcionalidad completada)
  - Nunca commits gigantes con m√∫ltiples cambios no relacionados
  
- **Ejemplos de buenos commits:**
  - `[SCRUM-5] Crear modelo Task y migraci√≥n`
  - `[SCRUM-5] Agregar TaskFactory y TaskSeeder`
  - `[SCRUM-5] Implementar TaskController con API Resource`
  - `[SCRUM-5] Agregar tests para CRUD de Task con 85% coverage`

### Pull Requests:
- Crea un PR en GitHub despu√©s de todos los commits
- **Formato del PR:**
  - T√≠tulo: `[ISSUE-KEY] Descripci√≥n breve`
  - Descripci√≥n debe incluir:
    - Contexto del cambio
    - Qu√© se implement√≥
    - Tests agregados
    - Cobertura alcanzada
    - Enlace al issue de Jira
    - Screenshots si es UI (no aplica en APIs)
    
- **Ejemplo de descripci√≥n de PR:**
  ```markdown
  ## [SCRUM-5] Implementar endpoint para actualizar tareas
  
  ### Contexto
  Se necesitaba el endpoint PUT /api/tasks/{id} para actualizar tareas existentes.
  
  ### Cambios realizados
  - ‚úÖ Agregado m√©todo update() en TaskController
  - ‚úÖ Creado UpdateTaskRequest con validaciones
  - ‚úÖ Implementado TaskResource para respuestas
  - ‚úÖ Actualizada ruta a apiResource completo
  
  ### Testing
  - ‚úÖ Tests agregados para PUT /api/tasks/{id}
  - ‚úÖ Cobertura alcanzada: 87%
  - ‚úÖ Todos los tests pasan
  
  ### Issue de Jira
  https://tu-dominio.atlassian.net/browse/SCRUM-5
  ```

## 5. SCAFFOLDING DE LARAVEL (OBLIGATORIO)
- USA comandos de `php artisan make:...` para generar archivos
- Nunca crees archivos manualmente si existe un comando artisan
- Ejemplos:
  - `php artisan make:model NombreModelo -m` (con migraci√≥n)
  - `php artisan make:controller NombreController --api`
  - `php artisan make:request StoreNombreRequest`
  - `php artisan make:factory NombreFactory`
  - `php artisan make:seeder NombreSeeder`
  - `php artisan make:test NombreTest`

## 6. ACCESO AL WORKSPACE Y VERIFICACI√ìN DE ENTORNO
- **ANTES de empezar cualquier tarea:**
  - Ejecuta `make ps` para verificar el estado de los contenedores
  - Verifica que est√©n corriendo: workspace, postgres, nginx, etc.
  - Si no est√°n corriendo, ejecuta `make up` para levantarlos
  - Espera a que todos los servicios est√©n listos antes de continuar

- **Para ejecutar comandos de Laravel:**
  - Usa `make shell` para acceder al contenedor workspace
  - Esto te da acceso al contenedor Docker con PHP y artisan
  - Comandos √∫tiles dentro del workspace:
    - `php artisan migrate` - Ejecutar migraciones
    - `php artisan db:seed` - Ejecutar seeders
    - `php artisan test` - Ejecutar tests
    - `php artisan optimize:clear` - Limpiar cach√©s

- **Comandos Make disponibles desde fuera del contenedor:**
  - `make ps` - Ver estado de contenedores
  - `make up` - Levantar contenedores
  - `make down` - Detener contenedores
  - `make shell` - Acceder al workspace
  - `make artisan CMD="migrate"` - Ejecutar comando artisan
  - `make test` - Ejecutar tests
  - `make clear` - Limpiar cach√©s

## 7. TESTING Y COBERTURA (OBLIGATORIO)

### Antes de hacer cambios:
1. **Verifica tests existentes:**
   - Revisa si existen tests para la funcionalidad
   - Si existen tests, verifica que cubran TODOS los verbos HTTP necesarios
   - Ejemplo: Si existe `TaskTest.php`, verifica que tenga tests para GET, POST, PUT, DELETE
   - Si faltan tests para algunos verbos, a√±√°delos

2. **Ejecuta tests existentes:**
   - Ejecuta `php artisan test` ANTES de modificar c√≥digo
   - Aseg√∫rate de que todos pasen antes de empezar

### Durante el desarrollo:
3. **Crea/actualiza tests:**
   - Si NO existen tests, cr√©alos con: `php artisan make:test NombreTest`
   - Sigue el patr√≥n **AAA** (Arrange, Act, Assert):
     ```php
     // Arrange: Prepara datos y estado inicial
     $task = Task::factory()->create();
     
     // Act: Ejecuta la acci√≥n
     $response = $this->getJson("/api/tasks/{$task->id}");
     
     // Assert: Verifica el resultado
     $response->assertStatus(200);
     ```
   - Aseg√∫rate de cubrir TODOS los verbos necesarios:
     - GET /resource (index) - Listar todos
     - GET /resource/{id} (show) - Ver uno
     - POST /resource (store) - Crear
     - PUT /resource/{id} (update) - Actualizar
     - DELETE /resource/{id} (destroy) - Eliminar

### Despu√©s del refactor:
4. **Limpia cach√©:**
   - Ejecuta `php artisan optimize:clear`
   - Esto elimina cache de rutas, config, views, etc.

5. **Ejecuta tests con cobertura:**
   - Ejecuta `php artisan test --coverage`
   - Verifica que la cobertura sea **mayor al 80%**
   - Si es menor, a√±ade tests hasta alcanzar el objetivo

6. **Verifica que todos los tests pasen:**
   - NO hagas commits si alg√∫n test falla
   - NO hagas commits si la cobertura es menor al 80%

### Antes de hacer commits:
7. **Informa resultados:**
   - Muestra resumen de tests ejecutados
   - Muestra porcentaje de cobertura alcanzado
   - Lista qu√© tests se crearon o modificaron
   - **PIDE CONFIRMACI√ìN** antes de proceder con commits

## 8. VALIDACI√ìN DE RESULTADOS (OBLIGATORIO)
- Despu√©s de cambios en la base de datos, verifica con el MCP de postgres
- Usa el MCP de BD para confirmar que los datos se crearon correctamente
- Verifica que no se rompi√≥ funcionalidad existente
- Prueba los endpoints si son cambios en API
- Revisa que no haya errores en logs

## 9. BUENAS PR√ÅCTICAS DE LARAVEL
- Separa la l√≥gica en capas apropiadas:
  - **Rutas:** Solo definiciones, NO l√≥gica de negocio
  - **Controladores:** Coordinaci√≥n, NO validaci√≥n ni queries complejas
  - **Form Requests:** Toda la validaci√≥n
  - **Modelos:** Relaciones y l√≥gica de dominio
  - **Servicios:** L√≥gica de negocio compleja (cuando sea necesario)
  - **Resources:** Transformaci√≥n de datos para respuestas API

- Usa Eloquent correctamente
- Define fillable/guarded en modelos

- **Para rutas de API:**
  - Usa `Route::apiResource()` para crear CRUD completos autom√°ticamente
  - Ejemplo: `Route::apiResource('tasks', TaskController::class);`
  - Esto genera autom√°ticamente: index, store, show, update, destroy
  - Solo define rutas individuales si necesitas endpoints personalizados
  - Para excluir m√©todos: `->only(['index', 'show'])` o `->except(['destroy'])`

- **Para respuestas API:**
  - Crea API Resources con: `php artisan make:resource NombreResource`
  - Usa `NombreResource::collection()` para listas/colecciones (index)
  - Usa `new NombreResource($model)` para un solo elemento (show, store, update)
  - Nunca devuelvas modelos directamente en APIs

- Aplica principios SOLID

## 10. INTEGRACI√ìN CON JIRA (SI APLICA)
- Si la tarea viene de Jira, obt√©n toda la informaci√≥n de Atlassian
- Lee la descripci√≥n completa de la tarea
- Identifica Historia de Usuario, Objetivos y Criterios de Aceptaci√≥n
- Actualiza el estado de la tarea cuando empieces a trabajar
- Asocia commits con el issue key de Jira
- Agrega comentarios en Jira sobre el progreso si es relevante

## 11. DOCUMENTACI√ìN
- Comenta c√≥digo complejo o no obvio
- Mant√©n los PHPDoc actualizados en m√©todos p√∫blicos
- Si creas nuevas rutas, docum√©ntalas
- Si hay cambios importantes en la arquitectura, menci√≥nalo

## 12. COMUNICACI√ìN
- S√© proactivo: informa de cada paso importante que realizas
- Si encuentras problemas inesperados, rep√≥rtalos inmediatamente
- Sugiere mejoras si detectas oportunidades
- Explica las decisiones t√©cnicas que tomes

## FLUJO DE TRABAJO EST√ÅNDAR:

### Fase 0: Verificaci√≥n de Entorno (OBLIGATORIO)
0. üîç **Verificar que el entorno Docker est√© listo:**
   - Ejecuta `make ps` para verificar el estado de los contenedores
   - Si los contenedores no est√°n corriendo, ejecuta `make up`
   - Verifica que los servicios est√©n levantados (workspace, postgres, nginx, etc.)
   - Si hay problemas, informa al usuario antes de continuar
   - **NO contin√∫es si el entorno no est√° funcionando correctamente**

### Fase 1: Planificaci√≥n
1. üìã **Recibir tarea/solicitud** del usuario
2. üîç **Analizar contexto** del proyecto
3. üí° **Proponer estrategia** detallada paso a paso
4. ‚ùì **Hacer preguntas** si hay dudas o falta informaci√≥n
5. ‚è∏Ô∏è **ESPERAR confirmaci√≥n** del usuario (OBLIGATORIO)

### Fase 2: Preparaci√≥n
6. üåø **Crear rama nueva** con nomenclatura correcta
7. üß™ **Verificar tests existentes** y que pasen
8. üìä **Identificar gaps** en cobertura de tests

### Fase 3: Desarrollo
9. üíª **Implementar soluci√≥n** usando scaffolding de Laravel
10. üß™ **Crear/actualizar tests** siguiendo patr√≥n AAA
11. üîÑ **Asegurar cobertura** de todos los verbos HTTP

### Fase 4: Validaci√≥n (ANTES DE COMMITS)
12. üßπ **Limpiar cach√©** con `php artisan optimize:clear`
13. ‚úÖ **Ejecutar tests** con `php artisan test --coverage`
14. üìà **Verificar cobertura** > 80%
15. üîç **Validar resultados** en base de datos (MCP)
16. üìä **Informar resultados** de tests y cobertura
17. ‚è∏Ô∏è **PEDIR CONFIRMACI√ìN** antes de commits

### Fase 5: Integraci√≥n
18. üìù **Hacer commits l√≥gicos** con mensajes descriptivos
    - Formato: `[ISSUE-KEY] Descripci√≥n del cambio`
    - Un commit por funcionalidad completada
    - Nunca commits gigantes

19. üîÄ **Crear Pull Request** en GitHub
    - T√≠tulo: `[ISSUE-KEY] Descripci√≥n`
    - Descripci√≥n con contexto y cambios realizados
    - Enlace al issue de Jira

20. üéØ **Actualizar estado en Jira**
    - Mover tarea a "En revisi√≥n" o estado similar
    - Agregar comentario con enlace al PR
    - Mencionar tests a√±adidos y cobertura alcanzada

21. üéâ **Informar completaci√≥n** al usuario

**RECUERDA: 
- SIEMPRE verifica que Docker est√© corriendo antes de empezar (Fase 0)
- Nunca saltes el paso de confirmaci√≥n inicial (paso 5)
- Nunca hagas commits sin confirmaci√≥n despu√©s de tests (paso 17)
- NO hagas commits si los tests fallan o cobertura < 80%
- Ejecuta `make ps` al inicio para verificar el entorno**

